# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:
        if n == 0:
            return []

        def generateTreesHelper(start, end):
            if start > end:
                return [None]

            all_trees = []
            for i in range(start, end + 1):
                # Generate all combinations of left and right subtrees
                left_trees = generateTreesHelper(start, i - 1)
                right_trees = generateTreesHelper(i + 1, end)

                # Combine them with the current node as root
                for l in left_trees:
                    for r in right_trees:
                        current_tree = TreeNode(i)
                        current_tree.left = l
                        current_tree.right = r
                        all_trees.append(current_tree)

            return all_trees

        return generateTreesHelper(1, n)

This was another leet code problem that I did to help increase my understanding because I did not fully understand them.
https://leetcode.com/problems/unique-binary-search-trees-ii/description/
