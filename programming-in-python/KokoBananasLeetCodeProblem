class Solution:
    def minEatingSpeed(self, piles: List[int], x: int) -> int:
        def check_can_eat(k):
            actual_x = 0
            for pile in piles:
                actual_x += (pile + k - 1) // k  # Calculate hours needed for each pile
            return actual_x <= x

        j, k = 1, max(piles)  # Set lower bound to 1 and upper bound to max(piles)
       
        while k - j > 1:
            m = (j + k) // 2
            if check_can_eat(m):
                k = m
            else:
                j = m

        return k

This was one of the leet code problems that was recommended to do for binary searches. https://leetcode.com/problems/koko-eating-bananas/
